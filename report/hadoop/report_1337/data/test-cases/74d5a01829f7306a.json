{
  "uid" : "74d5a01829f7306a",
  "name" : "test_plsql_single_function[数字函数_03_mod]",
  "fullName" : "cases.hadoop.plsql.testplsql.TestPLSqlManipulateData#test_plsql_single_function",
  "historyId" : "6bfbfbe92855ec19ae8cc0b92eae5947",
  "time" : {
    "start" : 1609388376949,
    "stop" : 1609388393944,
    "duration" : 16995
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: 查询数据与默认查询数据不一致，请检查\nexpected_result: \n[['1', '0', '2']]\ndata_dict: \n[['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2']]",
  "statusTrace" : "self = <cases.hadoop.plsql.testplsql.TestPLSqlManipulateData object at 0x000001C480145F70>\ncases = {'exec_order': ['sql'], 'exec_sql': {'sql': 'f\"select mod(10,3),mod(3,3),mod(2,3) from {tb_name};\"'}, 'expected_result': [['1', '0', '2']], 'isInitialized': 0, ...}\n\n    @pytest.mark.login\n    @allure.story(\"SQL 单行函数使用\")\n    @pytest.mark.parametrize(\"cases\", [item for item in parse_yaml(single_function_data)],\n                             ids=[item[\"module_case_name\"] for item in parse_yaml(single_function_data)])\n    def test_plsql_single_function(self, cases):\n>       self.run_case_all_steps(cases=cases)\n\ncases\\hadoop\\plsql\\testplsql.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <cases.hadoop.plsql.testplsql.TestPLSqlManipulateData object at 0x000001C480145F70>\ncases = {'exec_order': ['sql'], 'exec_sql': {'sql': 'f\"select mod(10,3),mod(3,3),mod(2,3) from {tb_name};\"'}, 'expected_result': [['1', '0', '2']], 'isInitialized': 0, ...}\n\n    def run_case_all_steps(self, cases):\n        self.conn_id, sqltype, tb_name, exec_order, exec_sql, expected_result = self.run_case_steps(cases=cases)\n        with allure.step(\"按顺序执行sql语句，将返回结果与预期结果做对比\"):\n            for sql in exec_order:\n                # tb_name在eval语句中代入使用\n                print(f\"sql语句:{eval(exec_sql[sql])}\")\n                hp.sdc_dw.set_session_sqltype(dbName=self.db_name, connId=self.conn_id, sqltype=sqltype)\n                data_dict = \\\n                    hp.sdc_dw.dw_basic.dwrun_sqlParse_v1(dbName=self.db_name, sql=eval(exec_sql[sql]),\n                                                         connId=self.conn_id)[\"data\"]\n                print(f\"sql语句执行结果为:\\n{data_dict}\")\n>           assert expected_result == data_dict, f\"查询数据与默认查询数据不一致，请检查\\nexpected_result: \\n{expected_result}\\ndata_dict: \\n{data_dict}\\n\"\nE           AssertionError: 查询数据与默认查询数据不一致，请检查\nE           expected_result: \nE           [['1', '0', '2']]\nE           data_dict: \nE           [['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2']]\n\ncases\\hadoop\\plsql\\testplsql.py:87: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "_Class__pytest_setup_method",
    "time" : {
      "start" : 1609388376782,
      "stop" : 1609388376949,
      "duration" : 167
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1609388295240,
      "stop" : 1609388296616,
      "duration" : 1376
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: 查询数据与默认查询数据不一致，请检查\nexpected_result: \n[['1', '0', '2']]\ndata_dict: \n[['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2']]",
    "statusTrace" : "self = <cases.hadoop.plsql.testplsql.TestPLSqlManipulateData object at 0x000001C480145F70>\ncases = {'exec_order': ['sql'], 'exec_sql': {'sql': 'f\"select mod(10,3),mod(3,3),mod(2,3) from {tb_name};\"'}, 'expected_result': [['1', '0', '2']], 'isInitialized': 0, ...}\n\n    @pytest.mark.login\n    @allure.story(\"SQL 单行函数使用\")\n    @pytest.mark.parametrize(\"cases\", [item for item in parse_yaml(single_function_data)],\n                             ids=[item[\"module_case_name\"] for item in parse_yaml(single_function_data)])\n    def test_plsql_single_function(self, cases):\n>       self.run_case_all_steps(cases=cases)\n\ncases\\hadoop\\plsql\\testplsql.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <cases.hadoop.plsql.testplsql.TestPLSqlManipulateData object at 0x000001C480145F70>\ncases = {'exec_order': ['sql'], 'exec_sql': {'sql': 'f\"select mod(10,3),mod(3,3),mod(2,3) from {tb_name};\"'}, 'expected_result': [['1', '0', '2']], 'isInitialized': 0, ...}\n\n    def run_case_all_steps(self, cases):\n        self.conn_id, sqltype, tb_name, exec_order, exec_sql, expected_result = self.run_case_steps(cases=cases)\n        with allure.step(\"按顺序执行sql语句，将返回结果与预期结果做对比\"):\n            for sql in exec_order:\n                # tb_name在eval语句中代入使用\n                print(f\"sql语句:{eval(exec_sql[sql])}\")\n                hp.sdc_dw.set_session_sqltype(dbName=self.db_name, connId=self.conn_id, sqltype=sqltype)\n                data_dict = \\\n                    hp.sdc_dw.dw_basic.dwrun_sqlParse_v1(dbName=self.db_name, sql=eval(exec_sql[sql]),\n                                                         connId=self.conn_id)[\"data\"]\n                print(f\"sql语句执行结果为:\\n{data_dict}\")\n>           assert expected_result == data_dict, f\"查询数据与默认查询数据不一致，请检查\\nexpected_result: \\n{expected_result}\\ndata_dict: \\n{data_dict}\\n\"\nE           AssertionError: 查询数据与默认查询数据不一致，请检查\nE           expected_result: \nE           [['1', '0', '2']]\nE           data_dict: \nE           [['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2']]\n\ncases\\hadoop\\plsql\\testplsql.py:87: AssertionError",
    "steps" : [ {
      "name" : "初始化表及数据",
      "time" : {
        "start" : 1609388376949,
        "stop" : 1609388376949,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "获取数据库连接id",
      "time" : {
        "start" : 1609388376950,
        "stop" : 1609388377079,
        "duration" : 129
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "获取对应的表、sql语句、语句执行顺序及预期结果",
      "time" : {
        "start" : 1609388377080,
        "stop" : 1609388377080,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false
    }, {
      "name" : "按顺序执行sql语句，将返回结果与预期结果做对比",
      "time" : {
        "start" : 1609388377080,
        "stop" : 1609388393943,
        "duration" : 16863
      },
      "status" : "failed",
      "statusMessage" : "AssertionError: 查询数据与默认查询数据不一致，请检查\nexpected_result: \n[['1', '0', '2']]\ndata_dict: \n[['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2'], ['1', '0', '2']]\n\n",
      "statusTrace" : "  File \"D:\\PythonProjects\\me_auto_test\\autoTest\\cases\\hadoop\\plsql\\testplsql.py\", line 87, in run_case_all_steps\n    assert expected_result == data_dict, f\"查询数据与默认查询数据不一致，请检查\\nexpected_result: \\n{expected_result}\\ndata_dict: \\n{data_dict}\\n\"\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_method::0",
    "time" : {
      "start" : 1609388393952,
      "stop" : 1609388393952,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  }, {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1609388497987,
      "stop" : 1609388517461,
      "duration" : 19474
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "SQL 单行函数使用"
  }, {
    "name" : "tag",
    "value" : "login"
  }, {
    "name" : "parentSuite",
    "value" : "cases.hadoop.plsql"
  }, {
    "name" : "suite",
    "value" : "testplsql"
  }, {
    "name" : "subSuite",
    "value" : "TestPLSqlManipulateData"
  }, {
    "name" : "host",
    "value" : "SF-4359"
  }, {
    "name" : "thread",
    "value" : "6512-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cases.hadoop.plsql.testplsql"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "{'module_name': 'SQL 单行函数使用', 'module_case_name': '数字函数_03_mod', 'name_id': 'dwrun_sql_430_number_function_03_mod', 'isInitialized': 0, 'sqltype': 'plsql', 'tb_name': 'emp', 'exec_order': ['sql'], 'exec_sql': {'sql': 'f\"select mod(10,3),mod(3,3),mod(2,3) from {tb_name};\"'}, 'expected_result': [['1', '0', '2']]}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "login" ]
  },
  "source" : "74d5a01829f7306a.json",
  "parameterValues" : [ "{'module_name': 'SQL 单行函数使用', 'module_case_name': '数字函数_03_mod', 'name_id': 'dwrun_sql_430_number_function_03_mod', 'isInitialized': 0, 'sqltype': 'plsql', 'tb_name': 'emp', 'exec_order': ['sql'], 'exec_sql': {'sql': 'f\"select mod(10,3),mod(3,3),mod(2,3) from {tb_name};\"'}, 'expected_result': [['1', '0', '2']]}" ]
}